generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  RoleID          String   @id @default(uuid()) @db.VarChar(36)
  RoleName        String   @unique @db.VarChar(50)
  Description     String?  @db.VarChar(255)
  Permissions     Json?
  IsActive        Boolean  @default(true)
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime? @updatedAt

  accounts Account[]

  @@map("ROLE")
}

model Account {
  AccountID         String        @id @default(uuid()) @db.VarChar(36)
  Email             String        @unique @db.VarChar(100)
  Username          String        @unique @db.VarChar(255)
  PasswordHash      String?       @db.VarChar(255)
  Avatar            String?       @db.VarChar(255)
  RoleID            String        @db.VarChar(36)
  Locale            String?       @db.VarChar(10)
  Currency          String?       @db.VarChar(3) // Currency code (e.g., USD, VND, EUR)
  Status            AccountStatus @default(Active)
  CreatedAt         DateTime      @default(now())
  UpdatedAt         DateTime?     @updatedAt
  LastLogin         DateTime?
  
  // OAuth fields
  Provider          String?       @db.VarChar(50)  // 'email' or 'google'
  ProviderAccountId String?       @db.VarChar(255) // Google user ID
  EmailVerified     Boolean       @default(false)

  role        Role        @relation(fields: [RoleID], references: [RoleID], onDelete: Restrict)
  customer    Customer?
  enterprise  Enterprise?
  admin       Admin?
  support     Support[]
  authTokens  AuthToken[]
  driver      DeliveryDriver?
  passwordResetTokens PasswordResetToken[]

  @@index([RoleID])
  @@index([Locale])
  @@index([Currency])
  @@index([Status])
  @@index([CreatedAt])
  @@index([Provider])
  @@index([ProviderAccountId])
  @@index([EmailVerified])
  @@map("ACCOUNT")
}

model Customer {
  CustomerID              String        @id @default(uuid()) @db.VarChar(36)
  FullName                String        @db.VarChar(100)
  PhoneNumber             String        @unique @db.VarChar(15)
  Address                 String        @db.VarChar(255)
  DateOfBirth             DateTime?
  Gender                  Gender?
  PreferredPaymentMethod  PaymentMethod
  AccountID               String        @unique @db.VarChar(36)

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  reviews Review[]
  carts   Cart[]
  userHealth UserHealth[]
  orders  Order[]

  @@index([PreferredPaymentMethod])
  @@map("CUSTOMER")
}

model Enterprise {
  EnterpriseID    String   @id @default(uuid()) @db.VarChar(36)
  AccountID       String   @unique @db.VarChar(36)
  EnterpriseName  String   @db.VarChar(100)
  Address         String   @db.VarChar(255)
  Description     String?  @db.VarChar(255)
  PhoneNumber     String   @unique @db.VarChar(15)
  OpenHours       String   @db.VarChar(10)
  CloseHours      String   @db.VarChar(10)
  IsActive        Boolean  @default(true)
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime? @updatedAt
  DeletedAt       DateTime?
  CommissionRate  Decimal? @db.Decimal(5, 2)
  SettlementCycle SettlementCycle?

  account   Account   @relation(fields: [AccountID], references: [AccountID], onDelete: Restrict)
  vouchers  Voucher[]
  menus     Menu[]
  reviews   Review[]
  carts     Cart[]
  foods     Food[]
  settlements Settlement[]

  @@index([AccountID])
  @@index([EnterpriseName])
  @@index([DeletedAt])
  @@fulltext([EnterpriseName, Description])
  @@map("ENTERPRISE")
}

model Admin {
  AdminID           String  @id @default(uuid()) @db.VarChar(36)
  AccountID         String  @unique @db.VarChar(36)
  CanManageSystem   Boolean @default(false)
  CanViewReport     Boolean @default(false)
  RoleLevel         Int     @default(1)

  account  Account   @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  vouchers Voucher[]
  foodCategories FoodCategory[]

  @@index([RoleLevel])
  @@map("ADMIN")
}

model FoodCategory {
  CategoryID   String  @id @default(uuid()) @db.VarChar(36)
  CategoryName String  @unique @db.VarChar(50)
  Description  String? @db.VarChar(255)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt
  AdminID      String  @db.VarChar(36)

  foods Food[]
  admin Admin @relation(fields: [AdminID], references: [AdminID], onDelete: Restrict)

  @@index([AdminID])
  @@map("FOOD_CATEGORY")
}


model Food {
  FoodID         String  @id @default(uuid()) @db.VarChar(36)
  DishName       String  @db.VarChar(100)
  Price          Decimal @db.Decimal(18, 2)
  Stock          Int     @default(0)
  Description    String? @db.VarChar(255)
  ImageURL       String? @db.VarChar(255)
  FoodCategoryID String  @db.VarChar(36)
  EnterpriseID   String  @db.VarChar(36)
  IsAvailable    Boolean @default(true)
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime? @updatedAt

  foodCategory FoodCategory @relation(fields: [FoodCategoryID], references: [CategoryID], onDelete: Restrict)
  enterprise   Enterprise  @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Restrict)
  menuFoods    MenuFood[]
  orderDetails OrderDetail[]
  cartItems    CartItem[]

  @@index([FoodCategoryID])
  @@index([EnterpriseID])
  @@index([Price])
  @@index([DishName])
  
  // Keep only the covering composite for common filters
  @@index([FoodCategoryID, IsAvailable, Price])
  @@index([EnterpriseID, IsAvailable])
  @@fulltext([DishName, Description])
  @@map("FOOD")
}

model Menu {
  MenuID       String   @id @default(uuid()) @db.VarChar(36)
  EnterpriseID String   @db.VarChar(36)
  Description  String?  @db.VarChar(100)
  MenuName     String   @db.VarChar(100)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt

  enterprise Enterprise @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Restrict)
  menuFoods  MenuFood[]

  @@index([EnterpriseID])
  @@index([CreatedAt])
  @@map("MENU")
}

model MenuFood {
  FoodID String @db.VarChar(36)
  MenuID String @db.VarChar(36)

  food Food @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)
  menu Menu @relation(fields: [MenuID], references: [MenuID], onDelete: Cascade)

  @@id([FoodID, MenuID])
  @@map("MENU_FOOD")
}


model Voucher {
  VoucherID         String            @id @default(uuid()) @db.VarChar(36)
  EnterpriseID      String?           @db.VarChar(36)
  AdminID           String?           @db.VarChar(36)
  Code              String            @db.VarChar(100)
  DiscountPercent   Decimal?          @db.Decimal(5, 2)
  DiscountAmount    Decimal?          @db.Decimal(10, 2)
  CreatedBy         VoucherCreatedBy?
  CreatedAt         DateTime          @default(now())
  UpdatedAt         DateTime?         @updatedAt
  Status            VoucherStatus     @default(Pending)
  ExpiryDate        DateTime?
  MaxUsage          Int?
  UsedCount         Int               @default(0)
  MinOrderValue     Decimal?          @db.Decimal(10, 2)

  enterprise Enterprise? @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: SetNull)
  admin      Admin?      @relation(fields: [AdminID], references: [AdminID], onDelete: SetNull)
  orders     Order[]

  @@index([Status])
  @@index([ExpiryDate])
  @@index([EnterpriseID])
  @@index([AdminID])
  @@index([CreatedAt])
  @@unique([Code])
  @@map("VOUCHER")
}

model Order {
  OrderID                   String      @id @default(uuid()) @db.VarChar(36)
  CustomerID                String      @db.VarChar(36)
  VoucherID                 String?     @db.VarChar(36)
  TotalAmount               Decimal     @db.Decimal(18, 2)
  OrderDate                 DateTime    @default(now())
  DeliveryAddress           String      @db.Text
  DeliveryNote              String?     @db.Text
  EstimatedDeliveryTime     DateTime?
  Status                    OrderStatus @default(Pending)
  CommissionAmount          Decimal?    @db.Decimal(18, 2)

  customer      Customer    @relation(fields: [CustomerID], references: [CustomerID], onDelete: Restrict)
  voucher       Voucher?    @relation(fields: [VoucherID], references: [VoucherID], onDelete: SetNull)
  orderDetails  OrderDetail[]
  payments      Payment[]
  settlementItems SettlementItem[]

  @@index([VoucherID])
  @@index([Status])
  @@index([OrderDate])
  @@index([TotalAmount])
  @@index([CustomerID, Status])
  @@index([Status, OrderDate])
  @@index([CustomerID, OrderDate])
  @@map("ORDER")
}

model OrderDetail {
  OrderDetailID String  @id @default(uuid()) @db.VarChar(36)
  OrderID       String  @db.VarChar(36)
  FoodID        String  @db.VarChar(36)
  SubTotal      Decimal @db.Decimal(18, 2)
  Quantity      Int

  order Order @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade)
  food  Food  @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)

  @@index([OrderID])
  @@index([FoodID])
  @@unique([OrderID, FoodID])
  @@map("ORDER_DETAIL")
}

model Cart {
  CartID       String   @id @default(uuid()) @db.VarChar(36)
  CustomerID   String?  @db.VarChar(36)
  EnterpriseID String?  @db.VarChar(36)
  GuestToken   String?  @unique @db.VarChar(64)
  Status       CartStatus @default(Active)
  ExpiresAt    DateTime?
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt

  customer  Customer?  @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade)
  enterprise Enterprise? @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: SetNull)
  items      CartItem[]

  @@index([CustomerID])
  @@index([EnterpriseID])
  @@index([ExpiresAt])
  @@map("CART")
}

model CartItem {
  CartItemID String  @id @default(uuid()) @db.VarChar(36)
  CartID     String  @db.VarChar(36)
  FoodID     String  @db.VarChar(36)
  Quantity   Int     @default(1)
  Note       String? @db.VarChar(255)
  Price      Decimal @db.Decimal(18, 2)
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime? @updatedAt

  cart Cart @relation(fields: [CartID], references: [CartID], onDelete: Cascade)
  food Food @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)

  @@index([CartID])
  @@index([FoodID])
  @@unique([CartID, FoodID])
  @@map("CART_ITEM")
}

enum CartStatus {
  Active
  CheckedOut
  Abandoned
}

model DeliveryDriver {
  DriverID      String            @id @default(uuid()) @db.VarChar(36)
  AccountID     String            @unique @db.VarChar(36)
  FullName      String            @db.VarChar(100)
  PhoneNumber   String            @unique @db.VarChar(15)
  VehicleType   String?           @db.VarChar(50)
  Status        DriverStatus      @default(Offline)
  CurrentLat    Decimal?          @db.Decimal(10, 7)
  CurrentLng    Decimal?          @db.Decimal(10, 7)
  LastActiveAt  DateTime?
  CreatedAt     DateTime          @default(now())
  UpdatedAt     DateTime?         @updatedAt

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([Status])
  @@index([AccountID])
  @@map("DELIVERY_DRIVER")
}

model Payment {
  PaymentID      String        @id @default(uuid()) @db.VarChar(36)
  OrderID        String        @db.VarChar(36)
  PaymentDate    DateTime      @default(now())
  PaymentStatus  PaymentStatus @default(Pending)
  TransactionID  String?       @unique @db.VarChar(255)
  PaymentMethod  PaymentMethod
  TransactionData Json?

  order Order @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade)

  @@index([OrderID])
  @@index([PaymentStatus])
  @@index([PaymentDate])
  @@map("PAYMENT")
}

model Settlement {
  SettlementID  String   @id @default(uuid()) @db.VarChar(36)
  EnterpriseID  String   @db.VarChar(36)
  PeriodStart   DateTime
  PeriodEnd     DateTime
  NetPayout     Decimal? @db.Decimal(18, 2)
  Status        SettlementStatus @default(Pending)
  PaidAt        DateTime?
  TransactionID String?  @db.VarChar(255)
  CreatedAt     DateTime @default(now())

  enterprise  Enterprise @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Restrict)
  items       SettlementItem[]

  @@index([EnterpriseID])
  @@index([Status])
  @@index([PeriodStart, PeriodEnd])
  @@map("SETTLEMENT")
}

model SettlementItem {
  SettlementItemID String  @id @default(uuid()) @db.VarChar(36)
  SettlementID     String  @db.VarChar(36)
  OrderID          String  @db.VarChar(36)
  IsCOD            Boolean @default(false)

  settlement Settlement @relation(fields: [SettlementID], references: [SettlementID], onDelete: Cascade)
  order      Order      @relation(fields: [OrderID], references: [OrderID], onDelete: Restrict)

  @@index([SettlementID])
  @@index([OrderID])
  @@map("SETTLEMENT_ITEM")
}

model Support {
  MessageID    String        @id @default(uuid()) @db.VarChar(36)
  AccountID    String        @db.VarChar(36)
  Subject      String        @db.VarChar(255)
  Description  String?       @db.VarChar(255)
  SentAt       DateTime      @default(now())
  Status       SupportStatus @default(Pending)
  ReplyMessage String?       @db.Text

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([AccountID])
  @@index([Status])
  @@index([SentAt])
  @@map("SUPPORT")
}

model Review {
  ReviewID     String   @id @default(uuid()) @db.VarChar(36)
  CustomerID   String   @db.VarChar(36)
  EnterpriseID String   @db.VarChar(36)
  Rating       Int?     @db.TinyInt
  Comment      String?  @db.VarChar(100)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt
  Images       Json?

  customer   Customer   @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade)
  enterprise Enterprise @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Restrict)

  @@index([CustomerID])
  @@index([EnterpriseID])
  @@index([Rating])
  @@index([CreatedAt])
  @@unique([CustomerID, EnterpriseID])
  @@map("REVIEWS")
}

model UserHealth {
  HealthID            String   @id @default(uuid()) @db.VarChar(36)
  CustomerID          String   @db.VarChar(36)
  CreatedAt           DateTime @default(now())
  Age                 Int?
  Gender              Gender?
  Height              Decimal? @db.Decimal(8, 2)
  Weight              Decimal? @db.Decimal(8, 2)
  Goal                String?  @db.VarChar(100)
  MedicalConditions   Json?
  PreferredCuisine    Json?
  UpdatedAt           DateTime? @updatedAt

  customer Customer @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade)

  @@index([CustomerID])
  @@index([UpdatedAt])
  @@map("USER_HEALTH")
}

model AuthToken {
  TokenID      String   @id @default(uuid()) @db.VarChar(36)
  AccountID    String   @db.VarChar(36)
  RefreshToken String   @unique @db.VarChar(255)
  AccessToken  String?  @db.VarChar(255)
  CreatedAt    DateTime @default(now())
  ExpiredAt    DateTime
  RevokedAt    DateTime?
  IsValid      Boolean  @default(true)

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([AccountID])
  @@index([ExpiredAt])
  @@index([CreatedAt])
  @@index([AccountID, IsValid, ExpiredAt])
  @@map("AUTH_TOKEN")
}

model PasswordResetToken {
  TokenID     String   @id @default(uuid()) @db.VarChar(36)
  AccountID   String   @db.VarChar(36)
  ResetCode   String   @db.VarChar(6)
  ExpiresAt   DateTime
  IsUsed      Boolean  @default(false)
  CreatedAt   DateTime @default(now())

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([AccountID])
  @@index([ResetCode])
  @@index([ExpiresAt])
  @@index([IsUsed])
  @@map("PASSWORD_RESET_TOKEN")
}

enum AccountStatus {
  Active
  Inactive
}

enum Gender {
  Male
  Female
  Other
}

enum PaymentMethod {
  Cash
  CreditCard
  MoMo
  BankTransfer
}

enum VoucherCreatedBy {
  Admin
  Business
}

enum VoucherStatus {
  Pending
  Approved
  Rejected
}

enum OrderStatus {
  Pending
  Confirmed
  Preparing
  ReadyForPickup
  OutForDelivery
  Delivered
  Completed
  Cancelled
  Refunded
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum SettlementStatus {
  Pending
  Processing
  Completed
  Failed
}

enum SettlementCycle {
  Weekly
  Monthly
  Yearly
}

enum DriverStatus {
  Offline
  Idle
  EnRoute
  Delivering
  Unavailable
}


enum SupportStatus {
  Pending
  InProgress
  Resolved
  Closed
}