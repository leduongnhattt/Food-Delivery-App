
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  AccountID     String        @id @default(cuid()) @db.VarChar(25)
  Email         String        @unique @db.VarChar(100)
  Username      String        @unique @db.VarChar(255)
  PasswordHash  String        @db.VarChar(255)
  Avatar        String        @db.VarChar(255)
  Role          String        @db.VarChar(10)
  Status        AccountStatus @default(Active)
  CreatedAt     DateTime      @default(now())
  UpdatedAt     DateTime?     @updatedAt
  LastLogin     DateTime?

  customer   Customer?
  enterprise Enterprise?
  admin      Admin?
  orders     Order[]
  support    Support[]
  userHealth UserHealth[]
  authTokens AuthToken[]

  @@index([Email])
  @@index([Username])
  @@index([Role])
  @@index([Status])
  @@index([CreatedAt])
  @@map("ACCOUNT")
}

model Customer {
  CustomerID              String        @id @default(cuid()) @db.VarChar(25)
  FullName                String        @db.VarChar(100)
  PhoneNumber             String        @unique @db.VarChar(15)
  Address                 String        @db.VarChar(255)
  DateOfBirth             DateTime?
  Gender                  Gender?
  PreferredPaymentMethod  PaymentMethod
  AccountID               String        @unique @db.VarChar(25)

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  reviews Review[]

  @@index([PhoneNumber])
  @@index([AccountID])
  @@index([PreferredPaymentMethod])
  @@map("CUSTOMER")
}

model Enterprise {
  EnterpriseID    String   @id @default(cuid()) @db.VarChar(25)
  AccountID       String   @unique @db.VarChar(25)
  EnterpriseName  String   @db.VarChar(100)
  Address         String   @db.VarChar(255)
  Description     String?  @db.VarChar(255)
  PhoneNumber     String   @unique @db.VarChar(15)
  OpenHours       String   @db.VarChar(10)
  CloseHours      String   @db.VarChar(10)
  IsActive        Boolean  @default(true)
  DeletedAt       DateTime?

  account   Account   @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  vouchers  Voucher[]
  menus     Menu[]
  reviews   Review[]

  @@index([AccountID])
  @@index([PhoneNumber])
  @@index([IsActive])
  @@index([EnterpriseName])
  @@index([DeletedAt])
  @@fulltext([EnterpriseName, Description])
  @@map("ENTERPRISE")
}

model Admin {
  AdminID           String  @id @default(cuid()) @db.VarChar(25)
  AccountID         String  @unique @db.VarChar(25)
  Permission        String  @db.VarChar(255)
  CanManageSystem   Boolean @default(false)
  CanViewReport     Boolean @default(false)
  RoleLevel         Int     @default(1)

  account  Account   @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  vouchers Voucher[]

  @@index([AccountID])
  @@index([RoleLevel])
  @@index([CanManageSystem])
  @@map("ADMIN")
}

model FoodCategory {
  CategoryID   String  @id @default(cuid()) @db.VarChar(25)
  CategoryName String  @db.VarChar(50)
  Description  String? @db.VarChar(255)

  foods Food[]

  @@index([CategoryName])
  @@map("FOOD_CATEGORY")
}

model Food {
  FoodID         String  @id @default(cuid()) @db.VarChar(25)
  DishName       String  @db.VarChar(100)
  Price          Decimal @db.Decimal(18, 2)
  Stock          Int     @default(0)
  Description    String? @db.VarChar(255)
  ImageURL       String? @db.VarChar(255)
  FoodCategoryID String  @db.VarChar(25)
  IsAvailable    Boolean @default(true)

  foodCategory FoodCategory @relation(fields: [FoodCategoryID], references: [CategoryID], onDelete: Cascade)
  menuFoods    MenuFood[]
  orderDetails OrderDetail[]
  reviews      Review[]
  userHealth   UserHealth[]

  @@index([FoodCategoryID])
  @@index([IsAvailable])
  @@index([Price])
  @@index([DishName])
  @@index([FoodCategoryID, IsAvailable])
  @@index([Price, IsAvailable])
  @@fulltext([DishName, Description])
  @@map("FOOD")
}

model Menu {
  MenuID       String   @id @default(cuid()) @db.VarChar(25)
  EnterpriseID String   @db.VarChar(25)
  Description  String?  @db.VarChar(100)
  MenuName     String?  @db.VarChar(100)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt

  enterprise Enterprise @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Cascade)
  menuFoods  MenuFood[]

  @@index([EnterpriseID])
  @@index([CreatedAt])
  @@map("MENU")
}

model MenuFood {
  FoodID String @db.VarChar(25)
  MenuID String @db.VarChar(25)

  food Food @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)
  menu Menu @relation(fields: [MenuID], references: [MenuID], onDelete: Cascade)

  @@id([FoodID, MenuID])
  @@map("MENU_FOOD")
}

model Voucher {
  VoucherID         String            @id @default(cuid()) @db.VarChar(25)
  EnterpriseID      String?           @db.VarChar(25)
  AdminID           String?           @db.VarChar(25)
  Code              String            @db.VarChar(100)
  DiscountPercent   Decimal?          @db.Decimal(5, 2)
  DiscountAmount    Decimal?          @db.Decimal(10, 2)
  CreatedBy         VoucherCreatedBy?
  CreatedAt         DateTime          @default(now())
  UpdatedAt         DateTime?         @updatedAt
  Status            VoucherStatus     @default(Pending)
  ExpiryDate        DateTime?
  MaxUsage          Int?
  UsedCount         Int               @default(0)
  MinOrderValue     Decimal?          @db.Decimal(10, 2)

  enterprise Enterprise? @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: SetNull)
  admin      Admin?      @relation(fields: [AdminID], references: [AdminID], onDelete: SetNull)
  orders     Order[]

  @@index([Code])
  @@index([Status])
  @@index([ExpiryDate])
  @@index([EnterpriseID])
  @@index([AdminID])
  @@index([CreatedAt])
  @@unique([Code])
  @@map("VOUCHER")
}

model Order {
  OrderID                   String      @id @default(cuid()) @db.VarChar(25)
  AccountID                 String      @db.VarChar(25)
  VoucherID                 String?     @db.VarChar(25)
  TotalAmount               Decimal     @db.Decimal(18, 2)
  OrderDate                 DateTime    @default(now())
  DeliveryAddress           String      @db.Text
  DeliveryNote              String?     @db.Text
  EstimatedDeliveryTime     DateTime?
  Status                    OrderStatus @default(Pending)

  account      Account      @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  voucher      Voucher?     @relation(fields: [VoucherID], references: [VoucherID], onDelete: SetNull)
  orderDetails OrderDetail[]
  payments     Payment[]

  @@index([AccountID])
  @@index([VoucherID])
  @@index([Status])
  @@index([OrderDate])
  @@index([TotalAmount])
  @@index([AccountID, Status])
  @@index([Status, OrderDate])
  @@map("ORDER")
}

model OrderDetail {
  OrderDetailID String  @id @default(cuid()) @db.VarChar(25)
  OrderID       String  @db.VarChar(25)
  FoodID        String  @db.VarChar(25)
  SubTotal      Decimal @db.Decimal(18, 2)
  Quantity      Int

  order Order @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade)
  food  Food  @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)

  @@index([OrderID])
  @@index([FoodID])
  @@map("ORDERDETAIL")
}

model Payment {
  PaymentID      String        @id @default(cuid()) @db.VarChar(25)
  OrderID        String        @db.VarChar(25)
  PaymentDate    DateTime      @default(now())
  PaymentStatus  PaymentStatus @default(Pending)
  TransactionID  String        @db.VarChar(255)
  PaymentMethod  PaymentMethod

  order Order @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade)

  @@index([OrderID])
  @@index([PaymentStatus])
  @@index([PaymentDate])
  @@index([TransactionID])
  @@map("PAYMENT")
}

model Support {
  MessageID    String        @id @default(cuid()) @db.VarChar(25)
  AccountID    String        @db.VarChar(25)
  Sender       SupportSender
  Subject      String        @db.VarChar(255)
  Description  String?       @db.VarChar(255)
  SentAt       DateTime
  Status       SupportStatus @default(Pending)
  ReplyMessage String?       @db.Text

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([AccountID])
  @@index([Status])
  @@index([SentAt])
  @@index([Sender])
  @@map("SUPPORT")
}

model Review {
  ReviewID     String   @id @default(cuid()) @db.VarChar(25)
  CustomerID   String   @db.VarChar(25)
  FoodID       String   @db.VarChar(25)
  EnterpriseID String   @db.VarChar(25)
  Rating       Int?     @db.TinyInt
  Comment      String?  @db.VarChar(100)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime? @updatedAt
  Images       String?  @db.Text

  customer   Customer   @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade)
  food       Food       @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)
  enterprise Enterprise @relation(fields: [EnterpriseID], references: [EnterpriseID], onDelete: Cascade)

  @@index([CustomerID])
  @@index([FoodID])
  @@index([EnterpriseID])
  @@index([Rating])
  @@index([CreatedAt])
  @@map("REVIEWS")
}

model UserHealth {
  HealthID            String   @id @default(cuid()) @db.VarChar(25)
  AccountID           String   @db.VarChar(25)
  FoodID              String   @db.VarChar(25)
  Age                 Int?
  Gender              Gender?
  Height              Decimal? @db.Decimal(8, 2)
  Weight              Decimal? @db.Decimal(8, 2)
  Goal                String?  @db.VarChar(100)
  MedicalConditions   String?  @db.VarChar(255)
  PreferredCuisine    String?  @db.VarChar(255)
  UpdatedAt           DateTime? @updatedAt

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)
  food    Food    @relation(fields: [FoodID], references: [FoodID], onDelete: Cascade)

  @@index([AccountID])
  @@index([FoodID])
  @@index([UpdatedAt])
  @@map("USERHEALTH")
}

model AuthToken {
  TokenID      String   @id @default(cuid()) @db.VarChar(25)
  AccountID    String   @db.VarChar(25)
  RefreshToken String   @db.VarChar(255)
  AccessToken  String?  @db.VarChar(255)
  CreatedAt    DateTime @default(now())
  ExpiredAt    DateTime
  RevokedAt    DateTime?
  IsValid      Boolean  @default(true)

  account Account @relation(fields: [AccountID], references: [AccountID], onDelete: Cascade)

  @@index([AccountID])
  @@index([RefreshToken])
  @@index([ExpiredAt])
  @@index([IsValid])
  @@index([CreatedAt])
  @@map("AUTH_TOKEN")
}

enum AccountStatus {
  Active
  Inactive
}

enum Gender {
  Male
  Female
  Other
}

enum PaymentMethod {
  Cash
  CreditCard
  MoMo
  BankTransfer
}

enum VoucherCreatedBy {
  Admin
  Business
}

enum VoucherStatus {
  Pending
  Approved
  Rejected
}

enum OrderStatus {
  Pending
  Completed
  Canceled
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum SupportSender {
  Admin
  Customer
}

enum SupportStatus {
  Pending
  InProgress
  Resolved
  Closed
}